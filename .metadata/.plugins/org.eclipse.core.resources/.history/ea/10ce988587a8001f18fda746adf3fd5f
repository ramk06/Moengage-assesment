package com.servlet;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/search")
public class SearchServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private static final String PERSISTENCE_UNIT = "E1"; // Define the persistence unit name as a constant

    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Validate user session
        String username = (String) request.getSession().getAttribute("username");
        if (username == null) {
            response.sendRedirect("login.jsp?error=unauthorized");
            return;
        }

        // Fetch saved lists for the user
        List<com.entity.List> savedLists = fetchSavedLists(username);

        // Retrieve filter input
        String filter = request.getParameter("filter");
        List<String> images = new ArrayList<>();

        if (filter != null && !filter.trim().isEmpty()) {
            // Validate and process the filter
            if (!isValidFilter(filter)) {
                response.sendRedirect("search.jsp?error=invalid");
                return;
            }
            List<String> responseCodes = generateResponseCodes(filter);
            images = fetchImageUrls(responseCodes);
        }

        // Set attributes for the JSP
        request.setAttribute("savedLists", savedLists);
        request.setAttribute("images", images);
        request.getRequestDispatcher("search.jsp").forward(request, response);
    }

    /**
     * Validates the filter input.
     *
     * @param filter The filter input string.
     * @return true if valid, false otherwise.
     */
    private boolean isValidFilter(String filter) {
        return filter.matches("\\d{1,3}(x{0,2})"); // Match exact numbers (e.g., 200, 203) or wildcard patterns (e.g., 2xx, 23x)
    }

    /**
     * Generates response codes based on the filter.
     *
     * @param filter The filter input.
     * @return List of generated response codes.
     */
    private List<String> generateResponseCodes(String filter) {
        List<String> codes = new ArrayList<>();

        if (filter.endsWith("xx")) { // Handle 'xx' wildcard filters (e.g., 2xx)
            char prefix = filter.charAt(0);
            for (int i = 0; i <= 9; i++) {
                for (int j = 0; j <= 9; j++) {
                    codes.add(prefix + "" + i + j); // Generate 200-299
                }
            }
        } else if (filter.endsWith("x")) { // Handle 'x' wildcard filters (e.g., 23x)
            char prefix1 = filter.charAt(0);
            char prefix2 = filter.charAt(1);
            for (int i = 0; i <= 9; i++) {
                codes.add(prefix1 + "" + prefix2 + i); // Generate 230-239
            }
        } else { // Handle exact matches
            codes.add(filter);
        }

        return codes;
    }

    /**
     * Fetches image URLs corresponding to the response codes.
     *
     * @param responseCodes List of response codes.
     * @return List of image URLs.
     */
    private List<String> fetchImageUrls(List<String> responseCodes) {
        List<String> images = new ArrayList<>();
        for (String code : responseCodes) {
            images.add("https://http.dog/" + code + ".jpg");
        }
        return images;
    }

    /**
     * Fetches the saved lists for the logged-in user.
     *
     * @param username The username of the logged-in user.
     * @return List of saved lists.
     */
    private List<com.entity.List> fetchSavedLists(String username) {
        EntityManagerFactory factory = null;
        EntityManager manager = null;

        try {
            factory = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);
            manager = factory.createEntityManager();

            return manager.createQuery("SELECT l FROM List l WHERE l.username = :username", com.entity.List.class)
                          .setParameter("username", username)
                          .getResultList();
        } catch (Exception e) {
            e.printStackTrace();
            return new ArrayList<>(); // Return an empty list on failure
        } finally {
            if (manager != null) manager.close();
            if (factory != null) factory.close();
        }
    }
}
