package com.servlet;

import java.io.IOException;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.entity.List;
import com.entity.User;

@WebServlet("/saveList")
public class SaveListServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Retrieve session attributes and form data
        String username = (String) request.getSession().getAttribute("username");
        String filter = request.getParameter("filter");

        // Validate input
        if (isInvalidInput(username, filter)) {
            response.sendRedirect("search.jsp?error=invalid");
            return;
        }

        // Initialize database resources
        EntityManagerFactory factory = null;
        EntityManager manager = null;
        EntityTransaction transaction = null;

        try {
            factory = Persistence.createEntityManagerFactory("E1");
            manager = factory.createEntityManager();
            transaction = manager.getTransaction();

            transaction.begin();

            // Fetch the user
            User user = manager.find(User.class, username);
            if (user == null) {
                response.sendRedirect("search.jsp?error=usernotfound");
                return;
            }

            // Create and save the list
            List list = new List();
            list.setName(filter);
            list.setCreationDate(new Date());
            list.setUsername(user);
            manager.persist(list);

            transaction.commit();

            response.sendRedirect("lists.jsp?success=saved");
        } catch (Exception e) {
            handleTransactionError(transaction);
            e.printStackTrace();
            response.sendRedirect("search.jsp?error=exception");
        } finally {
            closeResources(manager, factory);
        }
    }

    // Validates input data
    private boolean isInvalidInput(String username, String filter) {
        return username == null || username.isEmpty() || filter == null || filter.isEmpty();
    }

    // Handles transaction rollback in case of an error
    private void handleTransactionError(EntityTransaction transaction) {
        if (transaction != null && transaction.isActive()) {
            transaction.rollback();
        }
    }

    // Closes JPA resources
    private void closeResources(EntityManager manager, EntityManagerFactory factory) {
        if (manager != null) {
            manager.close();
        }
        if (factory != null) {
            factory.close();
        }
    }
}
