package com.servlet;

import java.io.IOException;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/editList")
public class EditListServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private static final String PERSISTENCE_UNIT_NAME = "E1";

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Validate session
        String username = (String) request.getSession().getAttribute("username");
        if (username == null) {
            response.sendRedirect("login.jsp?error=unauthorized");
            return;
        }

        String listIdParam = request.getParameter("listId");

        // Validate listId parameter
        int listId;
        try {
            listId = Integer.parseInt(listIdParam);
        } catch (NumberFormatException e) {
            response.sendRedirect("lists.jsp?error=invalidlistid");
            return;
        }

        EntityManagerFactory factory = null;
        EntityManager manager = null;

        try {
            factory = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT_NAME);
            manager = factory.createEntityManager();

            // Fetch the list by ID
            com.entity.List list = manager.find(com.entity.List.class, listId);
            if (list != null && username.equals(list.getUsername())) {
                // Pass list to editList.jsp
                request.setAttribute("list", list);
                request.getRequestDispatcher("editList.jsp").forward(request, response);
            } else {
                response.sendRedirect("lists.jsp?error=notfound");
            }
        } catch (Exception e) {
            e.printStackTrace();
            response.sendRedirect("lists.jsp?error=exception");
        } finally {
            if (manager != null) manager.close();
            if (factory != null) factory.close();
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Validate session
        String username = (String) request.getSession().getAttribute("username");
        if (username == null) {
            response.sendRedirect("login.jsp?error=unauthorized");
            return;
        }

        String listIdParam = request.getParameter("listId");
        String newName = request.getParameter("name");

        // Validate parameters
        if (listIdParam == null || listIdParam.isEmpty() || newName == null || newName.trim().isEmpty()) {
            response.sendRedirect("lists.jsp?error=invalidinput");
            return;
        }

        int listId;
        try {
            listId = Integer.parseInt(listIdParam);
        } catch (NumberFormatException e) {
            response.sendRedirect("lists.jsp?error=invalidlistid");
            return;
        }

        EntityManagerFactory factory = null;
        EntityManager manager = null;
        EntityTransaction transaction = null;

        try {
            factory = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT_NAME);
            manager = factory.createEntityManager();
            transaction = manager.getTransaction();

            transaction.begin();

            // Fetch the list by ID
            com.entity.List list = manager.find(com.entity.List.class, listId);
            if (list != null && username.equals(list.getUsername())) {
                // Update the list
                list.setName(newName.trim());
                list.setCreationDate(new Date()); // Optional: Update creation date
                manager.merge(list);

                transaction.commit();
                response.sendRedirect("lists.jsp?success=updated");
            } else {
                response.sendRedirect("lists.jsp?error=notfound");
            }
        } catch (Exception e) {
            if (transaction != null && transaction.isActive()) {
                transaction.rollback();
            }
            e.printStackTrace();
            response.sendRedirect("lists.jsp?error=exception");
        } finally {
            if (manager != null) manager.close();
            if (factory != null) factory.close();
        }
    }
}
