package com.servlet;

import java.io.IOException;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.entity.User;

@WebServlet("/login")
public class Signin extends HttpServlet {
	private static final long serialVersionUID = 1L;

	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		// Retrieve form data
		String username = req.getParameter("username");
		String password = req.getParameter("password");

		// Input validation
		if (isInvalidInput(username, password)) {
			resp.sendRedirect("login.jsp?error=invalid");
			return;
		}

		// Perform database operations
		EntityManagerFactory factory = null;
		EntityManager manager = null;

		try {
			factory = Persistence.createEntityManagerFactory("E1");
			manager = factory.createEntityManager();

			// Validate the user credentials
			User user = manager.find(User.class, username);

			if (user != null && user.getPassword().equals(password)) {
				// Successful login
				HttpSession session = req.getSession();
				session.setAttribute("username", user.getUsername());
				resp.sendRedirect("search.jsp");
			} else {
				// Invalid credentials
				resp.sendRedirect("login.jsp?error=invalid");
			}
		} catch (Exception e) {
			e.printStackTrace();
			resp.sendRedirect("login.jsp?error=exception");
		} finally {
			closeResources(manager, factory);
		}
	}

	// Validates user input
	private boolean isInvalidInput(String username, String password) {
		return username == null || username.isEmpty() || password == null || password.isEmpty();
	}

	// Closes JPA resources
	private void closeResources(EntityManager manager, EntityManagerFactory factory) {
		if (manager != null) {
			manager.close();
		}
		if (factory != null) {
			factory.close();
		}
	}
}
